{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAAC,GAAK,OAGzB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,aCDVC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OAItB,aAHH,CAGI,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCRrBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDCG,E,kDAlDT,aAAc,IAAD,8BAEX,gBAmBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAa,IAPJ,E,qDAab,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAUzC,WAGE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACA,sBAAK9B,UAAU,MAAf,UACA,kDACI,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9CVI,aCKPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e4ae03ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = props => (\r\n\r\n\r\n<div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2> {props.monster.name}</h2>\r\n    <p> {props.monster.email}</p>\r\n</div>\r\n\r\n);","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component';\r\n\r\n//props로 파라메터값이 들어온다.    <CardList monsters={this.state.monsters}>안의 monsters\r\n//monster의 값은 App.js에서 json으로 받아온 this.state.monsters으로 채워줬다. \r\n\r\nexport const CardList = props => ( \r\n    <div className='card-list'>{\r\n          props.monsters.map((monster =>\r\n            //{}안의 monster는 CardList의 props의 monster이고\r\n            //괄호가 없는 monster는 parameter값으로 Card 컴포넌트에 전달하는 값\r\n            // monster={monster}\r\n               <Card key={monster.id} monster={monster}/>\r\n        ))} \r\n    </div>  \r\n);","import './search-box.styles.css';\r\nimport React from 'react';\r\n\r\n\r\n//This is functional component to render only part of the app. \r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n)"," \nimport './App.css';\nimport React, {Component} from 'react';\nimport{CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n \n    class App extends Component{\n\n      //Contstructor Runs at first \n      constructor(){\n        //super is part of class\n        super();\n\n        //state is object\n        this.state = { \n          monsters:[],\n          searchField: ''\n        };\n\n      \n      }\n\n      componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters:users}));\n      }\n\n      // => 가 하는일은 >>  this.handleChange = this.handleChange.bind(this);것과 동일. \n      // 다시말해서 arrow function =>이  'this'가 this.state를 타겟하게 해줌.  \n      handleChange = e => {\n        this.setState({ searchField: e.target.value });\n      }\n\n      //Whenever onChange happenes, re-render happenes. \n      render(){ \n      \n        //initializing variabels with state. \n        const { monsters, searchField } = this.state;\n\n        //monseters리스트에서, searchfield값이 있는(include) 값들로 filter해서 filteredMonsters에 저장.  \n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return (\n        <div className=\"App\"> \n        <h1>Monsters Rodolox</h1>\n            <SearchBox \n              placeholder='search Monsters'\n              handleChange={this.handleChange}\n            /> \n            <CardList monsters={filteredMonsters} /> \n        </div>\n        );\n      }\n    };\n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}